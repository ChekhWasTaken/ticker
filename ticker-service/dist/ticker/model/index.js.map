{"version":3,"sources":["../../../src/ticker/model/index.js"],"names":["sequelize","Sequelize","Ticker","define","key","STRING","datetime","symbol","broker","bid_price","REAL","bid_quantity","ask_price","ask_quantity","freezeTableName","timestamps","create","tickerData","ticker","Date","save","catch","error","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,IAAIC,mBAAJ,CAAc,mDAAd,CAAlB;;AAEA,MAAMC,SAASF,UAAUG,MAAV,CAAiB,UAAjB,EAA6B;AAC1CC,OAAKH,oBAAUI,MAD2B;AAE1CC,YAAUL,oBAAUI,MAFsB;AAG1CE,UAAQN,oBAAUI,MAHwB;AAI1CG,UAAQP,oBAAUI,MAJwB;AAK1CI,aAAWR,oBAAUS,IALqB;AAM1CC,gBAAcV,oBAAUS,IANkB;AAO1CE,aAAWX,oBAAUS,IAPqB;AAQ1CG,gBAAcZ,oBAAUS;AARkB,CAA7B,EASZ;AACDI,mBAAiB,IADhB;AAEDC,cAAY;AAFX,CATY,CAAf;;AAcA,SAASC,MAAT,CAAgBR,MAAhB,EAAwBD,MAAxB,EAAgCU,UAAhC,EAA4C;AAC1C,QAAMC,SAAS;AACbV,YAAS,GAAEA,MAAO,EADL;AAEbD,YAAS,GAAEA,MAAO,EAFL;AAGbD,cAAU,0BAAW,IAAIa,IAAJ,EAAX,EAAuB,qBAAvB,CAHG;;AAKbN,kBAAcI,WAAW,CAAX,CALD;AAMbL,eAAWK,WAAW,CAAX,CANE;AAObN,kBAAcM,WAAW,CAAX,CAPD;AAQbR,eAAWQ,WAAW,CAAX;AARE,GAAf;;AAWAC,SAAOd,GAAP,GAAc,GAAEc,OAAOV,MAAO,IAAGU,OAAOX,MAAO,EAA/C;;AAEA,SAAOW,MAAP;AACD;;AAED,SAASE,IAAT,CAAcF,MAAd,EAAsB;AACpBhB,SAAOc,MAAP,CAAcE,MAAd,EAAsBG,KAAtB,CAA4BC,SAASC,QAAQC,GAAR,CAAYF,KAAZ,CAArC;AACD;;kBAEc;AACbN,QADa;AAEbI;AAFa,C","file":"index.js","sourcesContent":["import Sequelize from 'sequelize';\nimport dateformat from 'dateformat';\n\nconst sequelize = new Sequelize('postgres://dbuser:asdfgh@localhost:5432/db_ticker');\n\nconst Ticker = sequelize.define('t_ticker', {\n  key: Sequelize.STRING,\n  datetime: Sequelize.STRING,\n  symbol: Sequelize.STRING,\n  broker: Sequelize.STRING,\n  bid_price: Sequelize.REAL,\n  bid_quantity: Sequelize.REAL,\n  ask_price: Sequelize.REAL,\n  ask_quantity: Sequelize.REAL,\n}, {\n  freezeTableName: true,\n  timestamps: false,\n});\n\nfunction create(broker, symbol, tickerData) {\n  const ticker = {\n    broker: `${broker}`,\n    symbol: `${symbol}`,\n    datetime: dateformat(new Date(), 'yyyy-mm-dd HH:MM:ss'),\n\n    ask_quantity: tickerData[3],\n    ask_price: tickerData[2],\n    bid_quantity: tickerData[1],\n    bid_price: tickerData[0],\n  };\n\n  ticker.key = `${ticker.broker}_${ticker.symbol}`;\n\n  return ticker;\n}\n\nfunction save(ticker) {\n  Ticker.create(ticker).catch(error => console.log(error));\n}\n\nexport default {\n  create,\n  save,\n};\n"]}